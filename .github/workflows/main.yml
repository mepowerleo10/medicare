name: Build and Push to AWS ECR

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build Spring Boot Application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        run: ./gradlew build

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: build/libs/

  deploy_to_linode:
    name: Copy and Deploy the JAR
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: build/libs/

      - name: Copy Application JAR to Remote
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.ID_RSA }}
          source: "build/libs/medicare-0.0.1-SNAPSHOT.jar"
          target: /opt/medicare/
          strip_components: 2
      - name: Restart the service
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.ID_RSA }}
          script: |
            cd /opt/medicare
            mv medicare-*.jar medicare.jar
            sudo systemctl restart medicare

  # build_docker_image:
  #   name: Build Docker Image and Push to ECR
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Login to AWS ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #       with:
  #         registry-type: public

  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build-output
  #         path: build/libs/

  #     - name: Get Short SHA
  #       id: short_sha
  #       run: |
  #         short_sha=$(git rev-parse --short HEAD)
  #         echo "::set-output name=short_sha::$(echo "$short_sha")"

  #     - name: Build, tag, and push the image to ECR
  #       id: build-image
  #       env:
  #         COMMIT_TAG: ${{ secrets.REPO_NAME }}/medicare:${{ steps.short_sha.outputs.short_sha }}
  #         IMAGE_TAG: ${{  secrets.REPO_NAME }}/medicare:latest
  #       run: |
  #         echo "Building docker container"
  #         docker build -t $IMAGE_TAG -t $COMMIT_TAG .
  #         echo "Pushing image to ECR"
  #         docker push $IMAGE_TAG
  #         docker push $COMMIT_TAG
  #         echo "::set-output name=$IMAGE_TAG"

  # deploy_to_ec2:
  #   name: Deploy Changes to EC2
  #   runs-on: ubuntu-latest
  #   needs: build_docker_image

  #   steps:
  #     - name: Deploy
  #       env:
  #         PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #         HOST: ${{ secrets.EC2_ADDRESS }}
  #         USER: ${{ secrets.EC2_USER }}
  #       run: |
  #         echo "$PRIVATE_KEY" > key.pem && chmod 400 key.pem
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} '
  #         # Access to EC2 granted, now we deploy
  #         cd /opt/medicare/ &&
  #         docker compose pull &&
  #         docker compose up --force-recreate --detach
  #         '
